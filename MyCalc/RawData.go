// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package MyCalc

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type RawData struct {
	_tab flatbuffers.Table
}

func GetRootAsRawData(buf []byte, offset flatbuffers.UOffsetT) *RawData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RawData{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *RawData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RawData) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *RawData) Description() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *RawData) Axis() int16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RawData) MutateAxis(n int16) bool {
	return rcv._tab.MutateInt16Slot(6, n)
}

func (rcv *RawData) CalcType() CalcType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return CalcType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *RawData) MutateCalcType(n CalcType) bool {
	return rcv._tab.MutateInt8Slot(8, int8(n))
}

func (rcv *RawData) Values(obj *Vec3, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 12
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *RawData) ValuesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func RawDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func RawDataAddDescription(builder *flatbuffers.Builder, description flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(description), 0)
}
func RawDataAddAxis(builder *flatbuffers.Builder, axis int16) {
	builder.PrependInt16Slot(1, axis, 0)
}
func RawDataAddCalcType(builder *flatbuffers.Builder, calcType CalcType) {
	builder.PrependInt8Slot(2, int8(calcType), 0)
}
func RawDataAddValues(builder *flatbuffers.Builder, values flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(values), 0)
}
func RawDataStartValuesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(12, numElems, 4)
}
func RawDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
